"use client";

import Image from "next/image";
import { useEffect, useRef, useState } from "react";
import { motion } from "framer-motion";
import GlassPanel from "@/components/ui/GlassPanel";
import { useRouter } from "next/navigation";
import type { RedditPost } from "@/types/brand";
import { useProspectConvoReply } from "@/hooks/api/useProspectConvoReply";
import { useAgentReply } from "@/hooks/useAgentReply";
import GenerateFirstAgent from "@/components/dashboard2/GenerateFirstAgent";
import { useBrand } from "@/contexts/BrandContext";
import { useProfile } from "@/contexts/ProfileContext";
import { useToast } from "@/components/ui/Toast";
import { useReply } from "@/contexts/ReplyContext";
import { useProspectPostAction } from "@/hooks/api/useProspectPostAction";

type AgentReplyBoxProps = {
  customReply: string;
  setCustomReply: (value: string) => void;
  replySent: boolean;
  post: RedditPost;
  onClose?: () => void;
};

export default function AgentReplyBox({
  customReply,
  setCustomReply,
  replySent,
  post,
  onClose,
}: AgentReplyBoxProps) {
  const router = useRouter();
  const textareaRef = useRef<HTMLTextAreaElement>(null);
  const { brand: brandData } = useBrand();
  const { activeConvoId, prospectProfileId } = useProfile();
  const replyConvo = useProspectConvoReply();
  const postActionMutation = useProspectPostAction();
  const [isCheckingReddit, setIsCheckingReddit] = useState(false);
  const { showToast } = useToast();
  const { onReplySuccess } = useReply();

  // Use the agent reply hook
  const {
    agents,
    isLoadingAgents,
    isGenerating,
    isBrandLoaded,
    generateWithAgent,
  } = useAgentReply(brandData?.id || "");

  // Get the single agent (first one)
  const agent = agents[0] || null;

  // Storage key for draft state
  const draftKey = `reddit-reply-draft-${post.thing_id}`;

  // Ensure auto-generate runs only once when ready
  const hasAutoGeneratedRef = useRef(false);

  const handleGenerateWithAgent = async () => {
    if (!agent) return;
    try {
      const result = await generateWithAgent(agent.id, post, {
        autoReply: true,
      });
      if (result.content) {
        setCustomReply(result.content);
      }
    } catch (error) {
      const message =
        error && typeof error === "object" && "message" in (error as any)
          ? (error as any).message
          : String(error);
      console.error("Error generating reply with agent:", message);
      if (message !== "Brand data not loaded") {
        alert("Failed to generate reply. Please try again.");
      }
    }
  };

  // Auto-generate reply once when agent and brand are ready
  useEffect(() => {
    if (
      agent &&
      isBrandLoaded &&
      !customReply &&
      !hasAutoGeneratedRef.current
    ) {
      hasAutoGeneratedRef.current = true;
      handleGenerateWithAgent();
    }
  }, [agent, isBrandLoaded]); // eslint-disable-line react-hooks/exhaustive-deps

  const handleRegenerate = async () => {
    if (!agent) return;
    try {
      const result = await generateWithAgent(agent.id, post, {
        autoReply: true,
      });
      if (result.content) {
        setCustomReply(result.content);
      }
    } catch (error) {
      const message =
        error && typeof error === "object" && "message" in (error as any)
          ? (error as any).message
          : String(error);
      console.error("Error regenerating reply with agent:", message);
      if (message !== "Brand data not loaded") {
        alert("Failed to regenerate reply.");
      }
    }
  };

  // Check if submission is in progress
  const isSubmittingAction = replyConvo.isPending || postActionMutation.isPending;

  // Handle reply submission with Reddit auth check
  const handleSendReply = async () => {
    if (!customReply.trim() || isSubmittingAction || replySent) return;

    setIsCheckingReddit(true);
    try {
      // Save draft state before potential redirect
      sessionStorage.setItem(
        draftKey,
        JSON.stringify({
          reply: customReply,
          timestamp: Date.now(),
        })
      );

      // Add post ID to URL hash so we can scroll back to it after redirect
      window.location.hash = `post-${post.thing_id}`;

      const resolvedBrandId = brandData?.id;
      if (!resolvedBrandId) {
        throw new Error("Brand ID is required for prospect conversation reply");
      }

      if (!prospectProfileId || !activeConvoId) {
        throw new Error(
          "Prospect profile ID and active conversation ID are required for replies"
        );
      }

      // Use the prospect conversation reply endpoint
      await replyConvo.mutateAsync({
        brandId: resolvedBrandId,
        prospectProfileId,
        activeConvoId,
        parentPostThingId: post.thing_id,
        replyText: customReply,
      });
      
      // Show success toast
      showToast({
        message: "Reply sent successfully!",
        type: "success",
        duration: 3000,
      });
      
      // Clear draft
      sessionStorage.removeItem(draftKey);
      
      // Close reply box
      if (onClose) {
        onClose();
      }
      
      // Trigger success callback for auto-navigation
      if (onReplySuccess) {
        onReplySuccess();
      }
    } catch (error) {
      console.error("Error during reply submission:", error);
      alert("Failed to submit reply. Please try again.");
    } finally {
      setIsCheckingReddit(false);
    }
  };

  // Restore draft on mount if returning from redirect
  useEffect(() => {
    const draftData = sessionStorage.getItem(draftKey);
    if (draftData) {
      try {
        const { reply, timestamp } = JSON.parse(draftData);
        // Only restore if draft is less than 10 minutes old
        if (Date.now() - timestamp < 10 * 60 * 1000) {
          setCustomReply(reply);
        }
        // Clear the draft after restoring
        sessionStorage.removeItem(draftKey);
      } catch (error) {
        console.error("Error restoring draft:", error);
        sessionStorage.removeItem(draftKey);
      }
    }
  }, [draftKey, setCustomReply]);

  // Clear reply and draft when successfully sent
  useEffect(() => {
    if (replySent) {
      setCustomReply("");
      sessionStorage.removeItem(draftKey);
      // Reset textarea height
      if (textareaRef.current) {
        textareaRef.current.style.height = "auto";
      }
    }
  }, [replySent, draftKey, setCustomReply]);

  useEffect(() => {
    if (textareaRef.current) {
      textareaRef.current.style.height = "auto";
      textareaRef.current.style.height =
        textareaRef.current.scrollHeight + "px";
    }
  }, [customReply]);

  return (
    <GlassPanel className="mt-4 p-4 rounded-xl relative" variant="light">
      <div className="mb-4">
        {isLoadingAgents ? (
          <div className="flex items-center justify-center py-8">
            <div className="text-white/50 text-sm">Loading agent...</div>
          </div>
        ) : !agent ? (
          <GenerateFirstAgent />
        ) : (
          <div className="relative flex items-center gap-4 p-3 rounded-xl bg-white/5 border border-white/10">
            <div className="relative w-14 h-14 rounded-full overflow-hidden bg-gradient-to-br from-purple-400 to-green-400 flex items-center justify-center text-2xl font-bold text-white shadow-lg">
              {agent.avatar && agent.avatar.startsWith("http") ? (
                <Image
                  src={agent.avatar}
                  alt={agent.name}
                  width={56}
                  height={56}
                  className="w-full h-full object-cover"
                />
              ) : agent.avatar && !agent.avatar.startsWith("http") ? (
                <span>{agent.avatar}</span>
              ) : (
                <span>{agent.name.charAt(0).toUpperCase()}</span>
              )}
              <div className="absolute -top-1 -right-1 w-3 h-3 bg-green-400 rounded-full animate-pulse" />
            </div>
            <div className="flex-1 min-w-0">
              <div className="text-white font-medium truncate">
                {agent.name}
              </div>
              <div className="text-white/60 text-xs mt-0.5">
                Ready to generate replies for you
              </div>
            </div>
            <div className="flex items-center gap-2">
              <button
                onClick={handleGenerateWithAgent}
                disabled={isGenerating}
                className="px-3 py-1.5 rounded-lg bg-purple-500/20 border border-purple-400/30 text-purple-200 hover:bg-purple-500/30 transition-colors text-sm font-medium disabled:opacity-50"
              >
                {isGenerating ? "Generating..." : "Generate Reply"}
              </button>
              <button
                onClick={() =>
                  router.push(
                    `http://localhost:3001/dashboard/team/${brandData?.id}`
                  )
                }
                className="text-white/60 hover:text-white p-1 rounded transition-colors"
                disabled={isGenerating}
                aria-label="Edit agent"
                title="Edit agent"
              >
                <svg
                  className="w-3 h-3"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"
                  />
                </svg>
              </button>
            </div>
            {isGenerating && (
              <div className="absolute inset-0 rounded-xl bg-black/40 flex items-center justify-center">
                <div className="w-6 h-6 border-2 border-white/30 border-t-white rounded-full animate-spin" />
              </div>
            )}
          </div>
        )}
      </div>

      <div className="flex items-start justify-between mb-3">
        <textarea
          ref={textareaRef}
          value={customReply}
          onChange={(e) => {
            setCustomReply(e.target.value);
            e.currentTarget.style.height = "auto";
            e.currentTarget.style.height = e.currentTarget.scrollHeight + "px";
          }}
          placeholder="Write your reply or use AI generation above..."
          className="w-full p-3 rounded-xl font-body text-sm resize-none focus:outline-none focus:ring-2 focus:ring-purple-400/50 transition-all overflow-hidden"
          style={{
            background: "rgba(255, 255, 255, 0.1)",
            backdropFilter: "blur(10px)",
            border: "1px solid rgba(255, 255, 255, 0.2)",
            color: "white",
            minHeight: "100px",
            maxHeight: "400px",
            overflowY: customReply.length > 1000 ? "auto" : "hidden",
          }}
          rows={4}
        />
        {agent && customReply && (
          <button
            onClick={handleRegenerate}
            disabled={isGenerating}
            className="ml-3 text-white/70 hover:text-white hover:scale-110 transition-all duration-200 disabled:opacity-50"
            title="Regenerate reply"
          >
            {isGenerating ? (
              <div className="w-4 h-4 border border-white/30 border-t-white rounded-full animate-spin"></div>
            ) : (
              <svg
                className="w-4 h-4"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
                />
              </svg>
            )}
          </button>
        )}
      </div>

      <div className="flex justify-between">
        <motion.button
          onClick={async () => {
            if (!brandData?.id || !prospectProfileId) {
              showToast({
                message: "Missing required context for ignoring post",
                type: "error",
                duration: 3000,
              });
              return;
            }
            
            try {
              await postActionMutation.mutateAsync({
                post,
                action: "ignore",
                brandId: brandData.id,
                brandName: brandData.name,
                brandDetail: brandData.detail || undefined,
                prospectId: prospectProfileId,
              });
              
              showToast({
                message: "Post ignored",
                type: "success",
                duration: 2000,
              });
              
              // Close reply box after ignoring
              if (onClose) {
                onClose();
              }
              
              // Trigger success callback for auto-navigation
              if (onReplySuccess) {
                onReplySuccess();
              }
            } catch (error) {
              console.error("Error ignoring post:", error);
              showToast({
                message: "Failed to ignore post",
                type: "error",
                duration: 3000,
              });
            }
          }}
          disabled={isSubmittingAction}
          className="px-4 py-2 rounded-xl font-body font-medium text-sm transition-all duration-300 hover:scale-105"
          style={{
            background: "rgba(255, 255, 255, 0.05)",
            color: "rgba(255, 255, 255, 0.7)",
            border: "1px solid rgba(255, 255, 255, 0.2)",
            boxShadow: "0 4px 12px rgba(0, 0, 0, 0.1)",
          }}
          whileTap={{ scale: 0.98 }}
        >
          {postActionMutation.isPending ? "Ignoring..." : "Ignore"}
        </motion.button>
        
        <motion.button
          onClick={handleSendReply}
          disabled={
            !customReply.trim() ||
            isSubmittingAction ||
            replySent ||
            isCheckingReddit
          }
          className="px-4 py-2 rounded-xl font-body font-semibold text-sm transition-all duration-300 hover:scale-105"
          style={{
            background: customReply.trim()
              ? "linear-gradient(135deg, rgba(34, 197, 94, 0.8), rgba(16, 185, 129, 0.8))"
              : "rgba(255, 255, 255, 0.05)",
            color: customReply.trim() ? "white" : "rgba(255, 255, 255, 0.5)",
            border: "1px solid rgba(34, 197, 94, 0.3)",
            boxShadow: customReply.trim()
              ? "0 4px 12px rgba(34, 197, 94, 0.3)"
              : "none",
            textShadow: customReply.trim()
              ? "0 1px 2px rgba(0, 0, 0, 0.3)"
              : "none",
          }}
          whileTap={{ scale: 0.98 }}
        >
          {isCheckingReddit
            ? "Connecting to Reddit..."
            : isSubmittingAction && !postActionMutation.isPending
            ? "Submitting..."
            : replySent
            ? "Sent!"
            : "Send Reply"}
        </motion.button>
      </div>
    </GlassPanel>
  );
}
